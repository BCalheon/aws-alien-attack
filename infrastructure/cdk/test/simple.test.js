"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("@aws-cdk/assert/jest");
const configLayer = require("./../lib/layer/configurationLayer");
const databaseLayer = require("./../lib/layer/databaseLayer");
const securityLayer = require("./../lib/layer/securityLayer");
const storageLayer = require("./../lib/layer/storageLayer");
const contentDeliveryLayer = require("./../lib/layer/contentDeliveryLayer");
const processingLayer = require("./../lib/layer/processingLayer");
const websocketLayer = require("./../lib/layer/websocketLayer");
const ingestionConsumptionLayer = require("./../lib/layer/ingestionConsumptionLayer");
const resourceawarestack_1 = require("./../lib/resourceawarestack");
const nrta_1 = require("./../lib/nrta");
// This is the helper class which instantiates the essential resources and then pass them to the testFunction
class AlienAttackTest {
    static test(testFunction) {
        if (!testFunction)
            throw new Error("Test function was not defined");
        const stack = new resourceawarestack_1.ResourceAwareStack();
        const props = new nrta_1.NRTAProps();
        props.region = process.env.region;
        props.accountId = process.env.account;
        props.setApplicationName('TEST');
        testFunction(stack, props);
    }
}
/**
 * SECURITY LAYER
 */
test('SecurityLayer validation', () => {
    let testFunction = function (stack, props) {
        new securityLayer.SecurityLayer(stack, 'SecurityLayer', props);
        let expectedResources = [
            'AWS::IAM::Role',
            'AWS::IAM::Policy',
            'AWS::Lambda::Function',
            'AWS::Cognito::UserPool',
            'AWS::Cognito::UserPoolClient',
            'AWS::Lambda::Permission',
            'AWS::Cognito::IdentityPool',
            'AWS::Cognito::UserPoolGroup',
            'AWS::Cognito::IdentityPoolRoleAttachment'
        ];
        expectedResources.forEach((resource) => {
            expect(stack).toHaveResource(resource);
        });
    };
    AlienAttackTest.test(testFunction);
});
/**
 * CONFIGURATION LAYER
 * This simple test validates the Config layer (where Systems Manager parameters are defined),
 * so checking if the Cloudformation Template is generated properly
 *
 */
test('ConfigurationLayer validation (Systems Manager Parameters)', () => {
    let testFunction = function (stack, props) {
        let ssmParameters = new Map();
        ssmParameters.set("parameter1", "value1");
        props.addParameter("ssmParameters", ssmParameters);
        new configLayer.ConfigurationLayer(stack, 'ConfigLayer', props);
        expect(stack).toHaveResource('AWS::SSM::Parameter');
    };
    AlienAttackTest.test(testFunction);
});
/**
 * STORAGE LAYER
 */
test('StorageLayer validation', () => {
    let testFunction = function (stack, props) {
        props.addParameter('existingbuckets', []);
        new storageLayer.StorageLayer(stack, 'StorageLayer', props);
        expect(stack).toHaveResource('AWS::S3::Bucket');
    };
    AlienAttackTest.test(testFunction);
});
/**
 * CONTENT DELIVERY LAYER
 */
test('ContentDeliveryLayer validation', () => {
    let testFunction = function (stack, props) {
        props.addParameter('appBucket', { bucketName: 'testappbucket' });
        props.addParameter('rawBucket', { bucketName: 'testrawbucket' });
        new contentDeliveryLayer.ContentDeliveryLayer(stack, 'ContentDeliveryLayer', props);
        expect(stack).toHaveResource('AWS::CloudFront::CloudFrontOriginAccessIdentity');
        expect(stack).toHaveResource('AWS::CloudFront::Distribution');
        expect(stack).toHaveResource('AWS::S3::BucketPolicy');
    };
    AlienAttackTest.test(testFunction);
});
/**
 * DATABASE LAYER
 */
test('DatabaseLayer validation', () => {
    let testFunction = function (stack, props) {
        new databaseLayer.DatabaseLayer(stack, 'DatabaseLayer', props);
        expect(stack).toHaveResource('AWS::DynamoDB::Table');
    };
    AlienAttackTest.test(testFunction);
});
/**
 * PROCESSING LAYER
 */
test('ProcessingLayer validation', () => {
    let testFunction = function (stack, props) {
        props.addParameter('table.sessioncontrol', 'TBLSESSIONCONTROL');
        props.addParameter('table.sessionTopX', 'TBLSESSIONTOP');
        props.addParameter('table.session', 'TBLSESSION');
        new processingLayer.ProcessingLayer(stack, 'ProcessingLayer', props);
        let expectedResources = [
            'AWS::IAM::Role',
            'AWS::Lambda::Function',
            'AWS::SQS::Queue'
        ];
        expectedResources.forEach((resource) => {
            expect(stack).toHaveResource(resource);
        });
    };
    AlienAttackTest.test(testFunction);
});
/**
 * WEBSOCKET LAYER
 */
test('WebsocketLayer validation', () => {
    let testFunction = function (stack, props) {
        props.addParameter('table.sessioncontrol', 'TBL_TEST_SESSIONCONTROL');
        new websocketLayer.WebSocketLayer(stack, 'WebSocketLayer', props);
        expect(stack).toHaveResource('AWS::Lambda::Function');
        expect(stack).toHaveResource('AWS::IAM::Role');
    };
    AlienAttackTest.test(testFunction);
});
/**
 * INGESTION-CONSUMPTION LAYER
 */
test('IngestionConsumptionLayer validation', () => {
    let testFunction = function (stack, props) {
        props.addParameter('kinesisintegration', true);
        props.addParameter('firehose', true);
        let secl = new securityLayer.SecurityLayer(stack, 'SecurityLayer', props);
        props.addParameter('existingbuckets', []);
        let stol = new storageLayer.StorageLayer(stack, 'StorageLayer', props);
        props.addParameter('rawbucketarn', stol.getRawDataBucketArn());
        let dbl = new databaseLayer.DatabaseLayer(stack, 'DatabaseLayer', props);
        props.addParameter('table.sessionTopX', dbl.getResource('table.sessiontopx'));
        props.addParameter('table.session', dbl.getResource('table.session'));
        props.addParameter('table.sessionControl', dbl.getResource('table.sessioncontrol'));
        let pl = new processingLayer.ProcessingLayer(stack, 'ProcessingLayer', props);
        props.addParameter('rawbucketarn', stol.getRawDataBucketArn());
        props.addParameter('userpool', secl.getUserPoolArn());
        props.addParameter('userpoolid', secl.getUserPoolId());
        props.addParameter('table.session', dbl.getResource('table.session'));
        props.addParameter('table.sessiontopx', dbl.getResource('table.sessiontopx'));
        props.addParameter('lambda.allocate', pl.getAllocateFunctionRef());
        props.addParameter('lambda.deallocate', pl.getDeallocateFunctionArn());
        props.addParameter('lambda.scoreboard', pl.getScoreboardFunctionRef());
        props.addParameter('security.playersrole', secl.getResource('security.playersrole'));
        props.addParameter('security.managersrole', secl.getResource('security.managersrole'));
        new ingestionConsumptionLayer.IngestionConsumptionLayer(stack, 'IngestionConsumptionLayer', props);
        let expectedResources = [
            'AWS::Kinesis::Stream',
            'AWS::KinesisFirehose::DeliveryStream',
            'AWS::IAM::Role',
            'AWS::ApiGateway::RestApi',
            'AWS::ApiGateway::GatewayResponse',
            'AWS::ApiGateway::Authorizer',
            'AWS::ApiGateway::Model',
            'AWS::ApiGateway::Resource',
            'AWS::ApiGateway::Method',
            'AWS::ApiGateway::Deployment'
        ];
        expectedResources.forEach((resource) => {
            expect(stack).toHaveResource(resource);
        });
    };
    AlienAttackTest.test(testFunction);
});
//# sourceMappingURL=data:application/json;base64,